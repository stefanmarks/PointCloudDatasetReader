package nz.ac.aut.SentienceLab.PointCloudDatasetReader;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.text.ParseException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 * Main point cloud data conversion form
 * 
 * @author Stefan Marks
 */
public class MainForm extends javax.swing.JFrame
{
    /**
     * Creates new form MainForm
     */
    public MainForm()
    {
        settings   = new Settings();
        pointCloud = new PointCloudData();
        
        initComponents();
        readSettings();
    }

    
    private void readSettings()
    {
        txtSource.setText(settings.getSourceFile());
        cbxSourceCSys.setSelectedItem(settings.getSourceCSys());
        txtDestination.setText(settings.getDestinationFile());
        cbxDestinationCSys.setSelectedItem(settings.getDestinationCSys());
    }
    
    
    private void writeSettings()
    {
        settings.setSourceFile(txtSource.getText());
        settings.setSourceCSys((CoordinateSystem) cbxSourceCSys.getSelectedItem());
        settings.setDestinationFile(txtDestination.getText());
        settings.setDestinationCSys((CoordinateSystem) cbxDestinationCSys.getSelectedItem());
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel pnlMain = new javax.swing.JPanel();
        pnlSource = new javax.swing.JPanel();
        javax.swing.JLabel lblSource = new javax.swing.JLabel();
        txtSource = new javax.swing.JTextField();
        btnSource = new javax.swing.JButton();
        javax.swing.JLabel lblSourceType = new javax.swing.JLabel();
        cbxSourceType = new javax.swing.JComboBox<>();
        javax.swing.JLabel lblSourceCSys = new javax.swing.JLabel();
        cbxSourceCSys = new javax.swing.JComboBox<>();
        btnLoad = new javax.swing.JButton();
        pnlProcessing = new javax.swing.JPanel();
        btnRandomise = new javax.swing.JButton();
        javax.swing.JLabel lblBounds = new javax.swing.JLabel();
        txtBounds = new javax.swing.JTextField();
        javax.swing.JLabel lblOffset = new javax.swing.JLabel();
        txtOffsetX = new javax.swing.JTextField();
        txtOffsetY = new javax.swing.JTextField();
        txtOffsetZ = new javax.swing.JTextField();
        pnlDestination = new javax.swing.JPanel();
        javax.swing.JLabel lblDestination = new javax.swing.JLabel();
        txtDestination = new javax.swing.JTextField();
        btnDestination = new javax.swing.JButton();
        javax.swing.JLabel lblDestinationCSys = new javax.swing.JLabel();
        cbxDestinationCSys = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        javax.swing.JPanel pnlStatus = new javax.swing.JPanel();
        prgConverting = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Point Cloud Dataset Converter");

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlMain.setLayout(new java.awt.GridBagLayout());

        pnlSource.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Source"), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        pnlSource.setLayout(new java.awt.GridBagLayout());

        lblSource.setText("Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlSource.add(lblSource, gridBagConstraints);

        txtSource.setText(".\\input.csv");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlSource.add(txtSource, gridBagConstraints);

        btnSource.setText("...");
        btnSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSourceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        pnlSource.add(btnSource, gridBagConstraints);

        lblSourceType.setText("Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlSource.add(lblSourceType, gridBagConstraints);

        cbxSourceType.setModel(new DefaultComboBoxModel(new DataSource[] { new DataSource_PTS(), new DataSource_XYZRGB(), new DataSource_OBJ(),new DataSource_OldFormat()}));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlSource.add(cbxSourceType, gridBagConstraints);

        lblSourceCSys.setText("Coordinate System:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlSource.add(lblSourceCSys, gridBagConstraints);

        cbxSourceCSys.setModel(new DefaultComboBoxModel(new CoordinateSystem[] { CoordinateSystem.XR_YF_ZU, CoordinateSystem.XR_YU_ZF }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlSource.add(cbxSourceCSys, gridBagConstraints);

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlSource.add(btnLoad, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlMain.add(pnlSource, gridBagConstraints);

        pnlProcessing.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Processing"), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        pnlProcessing.setLayout(new java.awt.GridBagLayout());

        btnRandomise.setText("Randomise");
        btnRandomise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomiseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        pnlProcessing.add(btnRandomise, gridBagConstraints);

        lblBounds.setText("Bounds:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlProcessing.add(lblBounds, gridBagConstraints);

        txtBounds.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlProcessing.add(txtBounds, gridBagConstraints);

        lblOffset.setText("Offset: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlProcessing.add(lblOffset, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlProcessing.add(txtOffsetX, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlProcessing.add(txtOffsetY, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlProcessing.add(txtOffsetZ, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        pnlMain.add(pnlProcessing, gridBagConstraints);

        pnlDestination.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Destination"), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        pnlDestination.setLayout(new java.awt.GridBagLayout());

        lblDestination.setText("Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlDestination.add(lblDestination, gridBagConstraints);

        txtDestination.setText(".\\output.bytes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlDestination.add(txtDestination, gridBagConstraints);

        btnDestination.setText("...");
        btnDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDestinationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        pnlDestination.add(btnDestination, gridBagConstraints);

        lblDestinationCSys.setText("Coordinate System:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        pnlDestination.add(lblDestinationCSys, gridBagConstraints);

        cbxDestinationCSys.setModel(new DefaultComboBoxModel(new CoordinateSystem[] { CoordinateSystem.XR_YF_ZU, CoordinateSystem.XR_YU_ZF }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlDestination.add(cbxDestinationCSys, gridBagConstraints);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlDestination.add(btnSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlMain.add(pnlDestination, gridBagConstraints);

        pnlStatus.setLayout(new java.awt.BorderLayout());

        prgConverting.setEnabled(false);
        prgConverting.setStringPainted(true);
        pnlStatus.add(prgConverting, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        pnlMain.add(pnlStatus, gridBagConstraints);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoadActionPerformed
    {//GEN-HEADEREND:event_btnLoadActionPerformed
        if (activeTask != null)
        {
            if (activeTask instanceof LoaderTask) activeTask.stop();
        }
        else
        {
            writeSettings();
            LoaderTask l = new LoaderTask();
            l.start();
        }        
    }//GEN-LAST:event_btnLoadActionPerformed

    
    private void btnDestinationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDestinationActionPerformed
    {//GEN-HEADEREND:event_btnDestinationActionPerformed
        File file = new File(txtDestination.getText());
        JFileChooser fc = new JFileChooser(file.getParent());
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle("Select Destination File");
        fc.setSelectedFile(file);
        int choice = fc.showSaveDialog(this);
        if ( choice == JFileChooser.APPROVE_OPTION )
        {
            txtDestination.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_btnDestinationActionPerformed

    
    private void btnSourceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSourceActionPerformed
    {//GEN-HEADEREND:event_btnSourceActionPerformed
        File file = new File(txtSource.getText());
        JFileChooser fc = new JFileChooser(file.getParent());
        fc.setMultiSelectionEnabled(false);
        fc.setDialogTitle("Select Source File");
        fc.setSelectedFile(file);
        int choice = fc.showOpenDialog(this);
        if ( choice == JFileChooser.APPROVE_OPTION )
        {
            String filename = fc.getSelectedFile().toString();
            txtSource.setText(filename);
            filename = filename.replace(".csv", ".bytes");
            txtDestination.setText(filename);
        }
    }//GEN-LAST:event_btnSourceActionPerformed

    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (activeTask != null)
        {
            if (activeTask instanceof WriterTask) activeTask.stop();
        }
        else
        {
            writeSettings();
            WriterTask w = new WriterTask();
            w.start();
        }      
    }//GEN-LAST:event_btnSaveActionPerformed

    
    private void btnRandomiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomiseActionPerformed
        RandomizerTask r = new RandomizerTask();
        r.start();
    }//GEN-LAST:event_btnRandomiseActionPerformed

    
    
    /**
     * Main program entry point.
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(() ->
        {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDestination;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRandomise;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSource;
    private javax.swing.JComboBox<String> cbxDestinationCSys;
    private javax.swing.JComboBox<String> cbxSourceCSys;
    private javax.swing.JComboBox<String> cbxSourceType;
    private javax.swing.JPanel pnlDestination;
    private javax.swing.JPanel pnlProcessing;
    private javax.swing.JPanel pnlSource;
    private javax.swing.JProgressBar prgConverting;
    private javax.swing.JTextField txtBounds;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtOffsetX;
    private javax.swing.JTextField txtOffsetY;
    private javax.swing.JTextField txtOffsetZ;
    private javax.swing.JTextField txtSource;
    // End of variables declaration//GEN-END:variables


    private enum TaskState
    {
        Standby, Initializing, Running, Stopping, Stopped
    }


    private abstract class Task implements Runnable
    {
        protected Task()
        {
            m_state = TaskState.Standby;
        }
        
        public void start()
        {
            Thread t = new Thread(this);
            activeTask = this;
            t.start();
        }
        
        
        public abstract void initialize();
        
        @Override
        public void run()
        {
            m_state = TaskState.Initializing;
            initialize();
            m_state = TaskState.Running;
            execute();
            m_state = TaskState.Stopping;
            terminate();
            m_state = TaskState.Stopped;
            activeTask = null;
        }
        
        public abstract void execute();
                
        public abstract void terminate();
        
        public boolean isRunning()
        {
            return m_state == TaskState.Running;
        }
        
        public boolean isStopping()
        {
            return m_state == TaskState.Stopping;
        }
        
        public void stop()
        {
            if (isRunning())
            {
                m_state = TaskState.Stopping;
            }
        }
        
        protected TaskState m_state;
    }
    
    
    private class LoaderTask extends Task
    {
        @Override
        public void initialize()
        {
            btnLoad.setText("Cancel");
            pnlSource.setEnabled(true);
            pnlProcessing.setEnabled(false);
            pnlDestination.setEnabled(false);
            btnSave.setEnabled(false);
            setStatus("", 0);
        }
        
        
        @Override
        public void execute()
        {
            CoordinateSystem csysSrc = (CoordinateSystem) cbxSourceCSys.getSelectedItem();
            CoordinateSystem csysDst = (CoordinateSystem) cbxDestinationCSys.getSelectedItem();

            DataSource ds = (DataSource) cbxSourceType.getSelectedItem();

            if ( ds.openSource(new File(txtSource.getText())) )
            {
                // set progress bar determinate when point count known
                long pointCount = ds.getPointCount();
                prgConverting.setIndeterminate(pointCount < 0);

                pointCloud.reset();

                final int updateInterval = 1000;
                int updateIdx = 0;

                PointData p = null;
                do
                {
                    try
                    {
                        p = ds.readSource();
                        if ( p != null)
                        {
                            CoordinateSystem.convert(p, csysSrc, csysDst);
                            pointCloud.addPoint(p);

                            updateIdx++;
                            if (updateIdx > updateInterval)
                            {
                                if (pointCount > 0)
                                {
                                    int percent = (int) (100 * pointCloud.pointCount() / pointCount);
                                    setStatus(pointCloud.pointCount() + " / " + pointCount + " (" + percent + "%)", percent);
                                }
                                else
                                {
                                    setStatus(Long.toString(pointCloud.pointCount()), -1);
                                }
                                updateIdx = 0;   
                            }                                
                        }
                        else
                        {
                            setStatus("Point cloud loaded");
                            stop();
                            writePointCloudInfo();
                        }
                    }
                    catch (IOException | ParseException e)
                    {
                            System.err.println(e);
                            setStatus("Could not load point cloud");
                            stop();
                    }
                }
                while ( isRunning() );
            }

            ds.closeSource();
        }
        
        
        @Override
        public void terminate()
        {
            btnLoad.setText("Load");
            pnlSource.setEnabled(true);
            pnlProcessing.setEnabled(true);
            pnlDestination.setEnabled(true);
            btnSave.setEnabled(true);
        }
    }
    
    
    private class RandomizerTask extends Task
    {
        @Override
        public void initialize() {
            pnlSource.setEnabled(false);
            pnlProcessing.setEnabled(false);
            pnlDestination.setEnabled(false);
            btnRandomise.setEnabled(false);
            setStatus("Randomising...");
        }


        @Override
        public void execute()
        {
            pointCloud.randomise();
        }


        @Override
        public void terminate() {
            pnlSource.setEnabled(true);
            pnlProcessing.setEnabled(true);
            pnlDestination.setEnabled(true);
            setStatus("Point cloud randomised");
            btnRandomise.setEnabled(true);
        }
    }
    
    
    private class WriterTask extends Task
    {
        @Override
        public void initialize()
        {
            btnSave.setText("Cancel");
            pnlSource.setEnabled(false);
            pnlProcessing.setEnabled(false);
            pnlDestination.setEnabled(true);
            setStatus("", 0);
            readPointCloudInfo();
        }
        
        
        @Override
        public void execute()
        {
            try
            {
                final int updateInterval = 1000;
                long updateIdx = 0;
                long index     = 0;

                FileChannel chn = new FileOutputStream(txtDestination.getText()).getChannel();
                ByteBuffer  buf = ByteBuffer.allocate(PointData.SERIALIZED_SIZE * 2 * updateInterval);
                buf.order(ByteOrder.LITTLE_ENDIAN);

                // store point count
                pointCloud.serialize(buf);
                buf.flip();
                chn.write(buf);
                buf.clear();

                for (PointData point : pointCloud.points) 
                {
                    point.serialize(buf, pointCloud);
                    
                    index++;
                    updateIdx++;
                    if (updateIdx >= updateInterval)
                    {
                        // write the buffer
                        buf.flip();
                        chn.write(buf);
                        buf.clear();

                        long percent = index * 100L / pointCloud.pointCount();
                        setStatus(index + " / " + pointCloud.pointCount() + " (" + percent + "%)", (int) percent);
                        updateIdx = 0;
                    }

                    if ( isStopping() ) break;
                }

                // write the remainder of the buffer
                buf.flip();
                chn.write(buf);
                buf.clear();

                chn.close();
                setStatus("Point cloud saved");
            }
            catch (IOException e)
            {
                System.err.println(e);
                setStatus("Could not save point cloud");
            }
        }
        
        
        @Override
        public void terminate()
        {
            btnSave.setText("Save");
            pnlSource.setEnabled(true);
            pnlProcessing.setEnabled(true);
            pnlDestination.setEnabled(true);
        }
    }
    
    
    private void writePointCloudInfo()
    {
        final String format = "%f";
        txtBounds.setText(pointCloud.bbox.toString());
        txtOffsetX.setText(String.format(format, (pointCloud.bbox.xMax + pointCloud.bbox.xMin) / 2));
        txtOffsetY.setText(String.format(format, (pointCloud.bbox.yMax + pointCloud.bbox.yMin) / 2));
        txtOffsetZ.setText(String.format(format, (pointCloud.bbox.zMax + pointCloud.bbox.zMin) / 2));
    }
    
	
    private void readPointCloudInfo()
    {
        pointCloud.xOffset = Float.parseFloat(txtOffsetX.getText());
        pointCloud.yOffset = Float.parseFloat(txtOffsetY.getText());
        pointCloud.zOffset = Float.parseFloat(txtOffsetZ.getText());
    }
    
	
    private void setStatus(String status)
    {
        prgConverting.setIndeterminate(false);
        prgConverting.setValue(0);
        prgConverting.setString(status);
    }


    private void setStatus(String status, int percent)
    {
        prgConverting.setIndeterminate(percent < 0);
        prgConverting.setString(status);
        prgConverting.setValue(percent);
    }
	
    
    private final Settings       settings;
    private final PointCloudData pointCloud;
    private       Task           activeTask;
}
